*sum_usr_10.txt*	For Vim version 8.2	Last change: 2022 Jan 03

What I learned:

In Normal mode, entering "." repeats the last text change. To repeat a more
complex change, record the necessary commands into a register:

	q{register}{commands}q

Here, pressing 'q' followed by an alphabetical character begins recording
commands for that character register. Pressing 'q' again finishes the
recording; all keystrokes entered after {register} and before the last 'q' are
saved into {register}. Execute the contents of a register with

	@{register}

Prepend a count to execute the register that many times. A shortcut to execute
the last executed register is

	@@

Edit a register's contents by putting them on a new line, changing them, and
then yanking or deleting them back into the register:

	o<Esc>
	"rp
	{edits}
	"rdd

Append to a register by using its uppercase character:

	qR{commands}q

This capability works for yanking and deleting as well:

	"Ryy


Substitute text on a range of lines with

	:[range]s/from/to/[flags]

Use the 'g' flag to substitute all occurrences of "from" on a line to "to". (By
default, ":s" changes only the first occurrence on each line.) The '/'
delimiter can be replaced with another character so long as all occurrences use
the same character.


The format of a range is {number},{number}. Depending on the colon command,
omitting [range] affects the current line or the whole file. Special characters
may be used in a range to indicate specific lines:

	Range character    Represents
	.		   current line
	$		   last line
	%		   all lines

Append an operator+ or operator- and a number to a range boundary to specify
an offset:

	:.+5y

This command yanks the line five lines below the current one.

Instead of numbers, patterns and marks can be used to specify a range boundary:

	:'b,'e

Here, a command will affect only the lines between and including marks 'b and
'e. Special marks '< and '> delineate the beginning and end of the last visual
selection, respectively. Pressing ":" while in Visual mode automatically
prepares a range with these marks.

The number of lines to affect with a colon command starting at the current line
can be specified before pressing ":".


The ":global" command is similar to ":substitute", but instead of replacing a
string, it executes a command on each instance of a pattern. Its general form
is

	:[range]g/{pattern}/{command}


In Visual block mode, moving to the end of the current line with "$" highlights
all visually selected lines to their ends. Performing a horizontal cursor
movement breaks this behavior.

Special commands may be used in Visual block mode, which affect all lines in
the visual block:

	Visual-mode command    Description
	I		       Insert before visual block
	A		       Append after visual block; length
				 independent
	c		       Change visually selected text
	C		       Change text at left edge of visual block to the
				 end of the line
	r		       Replace visually selected characters with one
				 character
	~		       Swap case
	U		       Make uppercase
	u		       Make lowercase
	>		       Add one shiftwidth at left edge of visual block
	<		       Remove one shiftwidth at left edge of visual
				 block
	J		       Join selected lines into one line

Length-independent commands can affect lines too short to be highlighted in the
visual block. Editing commands only show the change on one line while editing.
Completing the edit copies the change to all of the lines in the visual block.


Use

	:[range]read {filename}

to insert text from {filename} into the current file after the last line number
of [range]. Omitting [range] inserts below the current line. Although invalid
for most commands, specifying zero for [range] inserts text at the start of the
current file.

To write a range of lines to a file, use

	:[range]write {filename}

Invoking this command on an existing file generates an error. Use '!' to
overwrite it. Omitting [range] writes the entire file to {filename}.


Use

	:set textwidth=72

to automatically trim each line to 72 characters while inserting them. Manually
reformat lines with the "gq" operator in Visual mode or before a movement
command or text object:

	gqap

This command reformats "a paragraph" so that each of its lines is at most 72
characters long.


Use the "gU" operator to make characters uppercase:

		 gUw
	word	---->	 WORD

Conversely, use "gu" to make them lowercase:

		 guw
	WORD	---->	 word

Use "g~" to swap case:

		 g~w
	Word	---->	 wORD

Apply the operator to the current line by doubling it or doubling its last
character:

				       gUU
	A case for case conversion    ---->    A CASE FOR CASE CONVERSION


Although Vim includes many useful commands, outside programs can sometimes
perform certain computations more efficiently or effectively. Filter a piece of
text in Vim to an external program with

	!{motion}{program}

This command executes {program} with an input of the text traversed by {motion}
and then replaces the text with the output of {program}. Filter the current
line to a program with the shortcut

	!!{program}

When entering a colon command, prepend '!' to a word to execute the
corresponding shell program:

	:!ls
	:write !wc

The second command passes the current file as standard input to the program
"wc". Be careful not to confuse it with

	:write! wc

which overwrites the file named "wc".

Redraw the screen in Vim with

	CTRL-L


 vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
