*sum_usr_30.txt*	For Vim version 8.2	Last change: 2022 Jan 07

What I learned:

Vim provides a set of "quickfix" commands: they enable compiling a program
from within Vim and stepping through errors generated (so that they may be
fixed). (See "quickfix" for more information, i.e., ":help quickfix".)

Invoke >

	:make {arguments}

to run "make" (an external program) with the arguments specified, if any. If
compiler errors were issued, Vim captures them and jumps to where the first
error occurred; Vim knows which file and line number to go because the errors
messages provide such information.

Jump to the next error with >

	:cnext

If an error message is too long, Vim truncates it. See the whole message with
>
	:cc

Get an overview of all the error messages containing file names and line
numbers that Vim recognizes with >

	:clist

To see unrecognized lines as well (e.g., linker errors), append "!" to the
above command.

Return to the previous error with >

	:cprevious

or >

	:cN

The following table shows other related commands for navigating the error
list:

	Command		Meaning ~
	:cfirst		to first error
	:clast		to last error
	:cc 3		to error nr 3

'makeprg' specifies the program to run when executing ":make". By default,
this command is "make". Arguments may be added to 'makeprg': >

	:set makeprg=nmake\ -f\ project.mak

Special Vim keywords may also be used: >

	:set makeprg=make\ %:S

"%" here expands to the name of the current file; thus, when editing the file
named "main.c", running ":make" executes "make main.c".

See "filename-modifiers" for more information.

Running ":make" multiple times, each after making changes to a file, produces
different error lists. View the previous error list with >

	:colder

Likewise, see the subsequent error list with >

	:cnewer

Vim remembers up to ten error lists.

Tell Vim the format of the error messages produced by a compiler with
'errorformat'. The syntax of this option is complicated as it can support
nearly any compiler. See "errorformat" for the details and explanation.

Instead of setting 'makeprg' and 'errorformat' to use a different compiler
(the process can be tedious and complicated), use the ":compiler" command: >

	:compiler msvc

The command here switches to the Microsoft Visual C++ compiler by finding the
Vim script for the "msvc" compiler and then executing it. For information
about writing these compiler scripts, see "write-compiler-plugin".

If compiler error messages are stored in a file, Vim can read them with >

	:cfile {filename}

Afterward, jumping to errors works the same way as it does after using
":make".


Vim provides automatic indenting for C and C-style programs through 'cindent':
>
	:set cindent shiftwidth=4

'shiftwidth' determines the number of spaces used for each indent level made
by 'cindent'. The following text is an example of how 'cindent' works--the
text on the right is what is typed, verbatim, and the left describes what
happens:

				    if (flag)
	Automatic indent   --->		do_the_work();
	Automatic unindent <--	    if (other_flag) {
	Automatic indent   --->		do_file();
	keep indent			do_some_more();
	Automatic unindent <--	    }

One benefit of automatic indentation is that it reveals syntactic errors. If
automatic indentation is indenting more than expected, some character
delineating the end of the indent level is missing (e.g., a semicolon or "}").

Re-indent lines with the "=" operator: >

	==

(Recall doubling an operator performs it on the current line.)

To change the indent style enforced by 'cindent', mutate 'cinoptions', which
is empty by default. For a list of all possible items of 'cinoptions' and
their descriptions, see "cinoptions-values".


Enable 'cindent' automatically when editing C files with >

	:filetype indent on

This command, more generally, enables detecting a file's type; if a file's
type is recognized, Vim searches for its corresponding indent file. (Vim
already provides indent files for many programming languages.) If the indent
file is found, Vim uses it to set the indent style of the file.

Disable this behavior with >

	:filetype indent off

Ignore setting the indent style of a specific file type by creating a file
and adding the line >

	:let b:did_indent = 1

to it. Then, write this file with the following name at the given path:

	{directory}/indent/{filetype}.vim

{filetype} is the name of the file type whose indent style is desired to be
ignored. {directory} is the first item of 'runtimepath', which can be derived
with >

	:set runtimepath

(It is the name before the first comma.)

To learn how to write a custom indent file, see "indent-expression".


The simplest form of automatic indentation is enabled with the 'autoindent'
option. It simply copies the indent of the previous line.

A slightly smarter indentation is that of 'smartindent', which can be useful
for files whose types lack indent files. This automatic indentation adds an
indent level for each "{" and removes one for each "}". It also adds one on
the line after that containing a word in 'cinwords'. Lines that begin with "#"
are stripped of their indentations because, in C, a "#" indicates a
preprocessor directive, and preprocessor directives generally start in the
first column. The indentation, however, is restored on the line following such
a line.

Quickly add a 'shiftwidth' worth of indent, rounding if possible, to the start
of line in Insert mode with >

	CTRL-T

The inverse is >

	CTRL-D

That is, it removes a 'shiftwidth' worth of indent, rounding if possible.

The operators ">" and "<", respectively, do the same in Normal mode, but
without rounding the indent.


Most programs assume the value of 'tabstop' is eight (i.e., a tab character is
worth eight spaces). Therefore, 'tabstop' should be left alone. However, when
indenting lines in a program, using eight spaces can quickly run text into the
right border of the window. In this situation, many people prefer four spaces.
There are two ways to achieve an indent of four spaces without mutating
'tabstop' in Vim:

	1. use a mix of <Tab> and space characters; or
	2. use spaces only.

The first method reduces the file's size by a few bytes and enables quick
insertion and deletion of indent (<Tab> characters are faster to type than the
corresponding number of spaces). The second method avoids trouble with
programs that deviate from the default 'tabstop' value of eight.

To employ a mix of <Tab> and space characters, set 'softtabstop': >

	:set softtabstop=4

This option gives the illusion that the <Tab> key behaves as if 'tabstop' was
set to 'softtabstop'. In reality, a combination of tabs and spaces are used.
In this case, pressing <Tab> moves the cursor to the next four-column
boundary: starting at the first column, pressing <Tab> inserts four spaces.
Another <Tab> removes the spaces and inserts a <Tab>, bringing the cursor to
column 8. Vim attempts to use as many <Tab>s as possible.

Backspacing works inversely: when the cursor succeeds a <Tab>, hitting <BS>
removes the <Tab> and inserts four spaces. Another <BS> deletes the whitespace
completely. A <BS> always deletes the amount of whitespace specified by
'softtabstop'.

An alternative to 'softtabstop' is 'smarttab': when set, 'smarttab' tells Vim
to use a 'shiftwidth' worth of spaces for a <Tab> entered in a line's indent
and a real <Tab> after the first printed character. The downside to this
approach is that <BS> cannot delete whitespace quickly.

For spaces only, set 'expandtab': >

	:set expandtab

Now, whenever the <Tab> key is pressed, the appropriate number of spaces is
inserted instead. Unfortunately, like 'smarttab', backspacing is slow; favor
CTRL-D when the cursor is in the line's indent.

Existing <Tab> characters will not be affected by 'expandtab'. To convert them
into spaces, use ":retab": >

	:set expandtab
	:retab

(See sum_usr25.txt for an introduction to ":retab".)

This command only converts leading <Tab>s--<Tab>s in a line's indent--into
spaces. To convert all <Tab> characters, append "!" to the above command.

Converting spaces to <Tab>s works too: >

	:set noexpandtab
	:retab!


Format comments with the "gq" operator. For example, with the cursor at the
start of the following comment, typing "gq]/"

	/* ~
	 * This is a test ~
	 * of the text formatting. ~
	 */ ~

produces

	/* ~
	 * This is a test of the text formatting. ~
	 */ ~

Pressing "o" when the cursor is on the middle line yields

	/* ~
	 * This is a test of the text formatting. ~
	 * ~
	 */ ~

Finally, typing a line in the comment that exceeds 'textwidth' will be broken
and formatted automatically:

	/* ~
	 * This is a test of the text formatting. ~
	 * Typing a lot of text here will make Vim ~
	 * break ~
	 */ ~

All of these comment formatting behaviors are possible because Vim knows how
to handle them; each is enabled by a flag in 'formatoptions':

	r	insert the star when typing <Enter> in Insert mode
	o	insert the star when using "o" or "O" in Normal mode
	c	break comment text according to 'textwidth'

See "fo-table" for the rest of such flags.

The 'comments' option defines what a comment looks like. Vim distinguishes
between a single-line comment and a comment that has a different start, end,
and middle part.

Many single-line comments start with a specific character. In C++, // is used;
in Makefiles, it is #; and in Vim scripts, a ". For example, to make Vim
understand C++ comments, use >

	:set comments=://

The general form of an item in 'comments' is

	{flags}:{text}

where {flags} may be omitted (as in the example above).

Several items may be specified in 'comments', separated by commas. This
capability allows recognizing different types of comments simultaneously. For
example, the command >

	:set comments=n:>,n:!

tells Vim about two comments: one starting with ">" and the other "!". Both
specify the "n" flag, which means they can nest. After setting 'textwidth' to
80, selecting the following comment in Visual mode

	> ! Did you see that site? ~
	> ! It looks really great. ~
	> I don't like it.  The ~
	> colors are terrible. ~
	What is the URL of that ~
	site? ~

and entering "gq" yields

	> ! Did you see that site?  It looks really great. ~
	> I don't like it.  The colors are terrible. ~
	What is the URL of that site? ~

Notice Vim did not move text from one type of comment to another: nested
comments are recognized uniquely by their sequences of nestable comment items.

C comments begin with "/*", have "*" at the start of intermediate lines, and
end with "*/". Their definition in 'comments' looks like the following: >

	:set comments=s1:/*,mb:*,ex:*/

The first item, "s1:/*", defines the starting symbol. The "s" flag indicates
the start of a three-piece comment. The subsequent number "1" tells Vim that
middle symbols have an offset of one space. The next item "mb:*" has the "m"
flag: its text is the middle part. It also has the "b" flag, which means that
a blank must follow its text. The final item--"ex:*/"--has "e" for "end of a
three-piece comment". The "x" is for convenience: when the cursor begins a new
intermediate line, typing "/" removes the blank after the middle part's text
automatically.


 vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
