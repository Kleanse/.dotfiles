*sum_usr_07.txt*	For Vim version 8.2	Last change: 2022 Jan 03

What I learned:

Invoking

	:edit foo.txt

opens a new file and closes the current one, where "foo.txt" is the name of the
file to open. Attempting to edit a new file without saving the current file
will generate an error; to resolve this error, write the file with the command

	:write

or discard all changes by appending the force character '!':

	:edit! foo.txt


Vim can be supplied a list of files to edit at execution:

	vim one.c two.c three.c

To view this list in Vim, use

	:args

The command displays the filenames within the list and brackets around the
current file. To move to the next file to edit, enter

	:next

When leaving a modified file, abandon all changes with the force character or
write the file with the shortcut

	:wnext

To move to the previously edited file, enter

	:previous

To move to the last file:

	:last

and the first:

	:first

These last two commands do not have the shortcut to write simultaneously.
The 'autowrite' option enables automatic writing of modified files when closing
them. Supplying filenames to :args prepares a new list of files to edit.


When the current file was opened after editing a previous file, pressing CTRL-^
jumps back to the previous file (known as the alternate file). Marks set with
lowercase characters are local; with uppercase ones, they are global. Global
marks behave like local ones, except they open the file that set them. To view
set marks, enter

	:marks

For specific marks, supply the characters used to set them:

	:marks MCP

This invocation shows the marks set for 'M', 'C', and 'P'.


Copying text from one file to another can be done intuitively using the yank
and put commands. A more sophisticated way is to use registers. Entering a
double quotation mark and any alphabetical character before yanking or deleting
text saves the text to that character register. For example,

	"ayas

stores the sentence yanked into register 'a'. Thus, all text to copy from a
file can be saved into individual registers. Then, they can be put into the
desired locations in the other file:

	"ap
	"bp
	...

assuming registers 'a', 'b', and whatever other registers are used.

To append to a file:

	:write >> logfile

This command appends the contents of the current file to a file named
"logfile."


Open a file in read-only mode by supplying the -R option when starting Vim:

	vim -R file

Writing a read-only file is disallowed but can be coerced with '!'.

Prohibit changes completely with a stronger version of -R:

	vim -M file

which opens "file" in non-modifiable mode. However, even a file in this mode
can be written by tweaking some options:

	:set modifiable
	:set write


Save a file under a new name:

	:saveas bar.txt

Further editing and writing affects "bar.txt." The original file remains
unmodified.

To change the current file's name, invoke

	:file newname


 vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
